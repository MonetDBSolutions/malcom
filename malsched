#!/usr/bin/env python3

import configparser
import glob
import os
import pickle
import sys
import string
import time

import lz4.frame

class QueryError(Exception):
    def __init__(self, msg, exit_code = None):
        self.message = msg
        self.exit_code = exit_code


class Connection:
    def __init__(self, name, mapi, size):
        self.name = name
        self.mapi = mapi
        self.size = size

class Interaction:
    out = sys.stdout
    at_beginning_of_line = True
    max_delay = 0.8
    animation = [chr(0x1f550 + i) for i in range(12)]
    animation_interval = 0.05

    def __call__(self, fmt, *args, **opts):
        txt = fmt.format(*args, **opts)
        self.out.write(txt)
        self.out.flush()
        if txt:
            self.at_beginning_of_line = txt.endswith('\n')
    
    def close(self):
        self.go_to_start()

    def go_to_start(self):
        if not self.at_beginning_of_line:
            self('\n')

    def delay(self, seconds):
        if seconds < self.max_delay:
            time.sleep(seconds)
        else:
            self.play_animation()

    def play_animation(self):
        reset = '\b\b'
        clear = '  '
        for s in self.animation:
            self.out.write(s)
            self.out.flush()
            time.sleep(self.animation_interval)
            self.out.write(reset)
            self.out.flush()
        self.out.write(clear)
        self.out.flush()
        self.out.write(reset)
        self.out.flush()

    def prompt(self, prompt="> "):
        self.go_to_start()
        answer = input(prompt)
        self.at_beginning_of_line = True
        return answer

interact = Interaction()

def main():
    interact("Welcome to the Malcom scheduler.\n")

    conf = default_config()
    conf.read(["malsched.ini", "malsched-local.ini"])

    connections = connect_to_databases(conf)
    model = load_model(conf)

    while True:
        try:
            qname = ask_which_query()
            if not qname:
                return 0

            query = read_query(conf, qname)
            interact("Query:\n{}\n", query)

            expected = predict_memory_use(model, qname, query)
            interact("Predicted memory use: {}\n", format_size(expected))

            (db_name, size_gb) = chose_best_database(conf, expected)
            interact("Advise to send this to {} which has {}\n", db_name, format_size(size_gb))

            for name, con in connections.items():
                interact("\nTrying at {}.. ", name)
                interact.delay(0.3)

                actual = min(expected * 1.06, con.size * 0.98)
                interact("max memory use {}", format_size(actual))

        except QueryError as e:
            if e.exit_code != None:
                interact("Error [{}]: {}\n\n", e.exit_code, e.message)
                return e.exit_code
            else:
                interact("Error: {}\n\n", e.message)


def default_config():
    conf = configparser.ConfigParser(None)
    return conf


def load_model(conf):
    prefix = conf['malsched']['trace_directory']
    globs = [word.strip() for word in conf['traces']['training'].split(',') if word]
    paths = [p for g in globs for p in glob.glob(os.path.join(prefix, g))]
    if not paths:
        raise RuntimeError("no training traces configured in [traces]training")
    
    interact("Loading {} traces\n", len(paths))
    maldicts = []
    for i, p in enumerate(paths):
        interact("{}/{}\r", i, len(paths))
        with open(p, 'rb') as raw_file:
            if p.endswith('.lz4'):
                with lz4.frame.LZ4FrameFile(raw_file, mode='rb') as lz_file:
                    maldict = pickle.load(lz_file) 
            else:
                maldict = pickle.load(raw_file)
        assert maldict
        maldicts.append(maldict)
    interact(' ' * 16 + '\r\n')

    [first, *rest] = maldicts
    union = first.union(*rest)
    return union



def connect_to_databases(conf):
    databases = [ name for name in conf.sections() if 'mapi' in conf[name] ]
    if not databases:
        raise RuntimeError("No database configured")
    for db in databases:
        if not 'size_gb' in conf[db]:
            raise QueryError("DB {} does not have size_gb configured".format(db))
    
    clients = {}
    for db in databases:
        interact("Connecting to {}..", db)
        interact.delay(0.3)
        mapi = conf[db]['mapi']
        size = float(conf[db]['size_gb']) * 1024 ** 3
        clients[db] = Connection(db, mapi, size)
        interact("connected\n")
    
    return clients


def ask_which_query():
    """Interacts with the user via `interact`, returning either a query name 
    or None if the user wants to quit
    """
    try:
        interact.go_to_start()
        interact("\n===============================\n")
        interact("Enter the name of a TPC-H query, for example Q22\n")
        name = interact.prompt()
        if name:
            return name.strip()
        interact("(Two more ENTERs mean QUIT)\n")
        for _ in range(2):
            name = interact.prompt()
            if name:
                return name.strip()
        return None
    except EOFError:
        return None


def read_query(conf, qname):
    prefix = conf['malsched']['sql_directory']
    path = os.path.join(prefix, qname.upper() + '.sql')
    if not os.path.exists(path):
        raise QueryError("File not found: {}".format(path))
    with open(path) as f:
        return f.read()


def predict_memory_use(model, qname, query):
    query = query.upper()
    if query == 'Q13':
        gb = 224
    elif query == 'Q22':
        gb = 1.3
    else:
        gb = 7.7
    return int(gb * 1024 * 1024 * 1024)


def chose_best_database(conf, bytes_needed):
    databases = [ 
        (name, float(conf[name]['size_gb']))
        for name in conf.sections()
        if 'mapi' in conf[name]
    ]
    choice = None
    best = None
    for (name, gb_max) in databases:
        size = gb_max * 1024 * 1024 * 1024
        if not choice:
            # Anything is better than nothing
            better = True
        elif best < bytes_needed and size > best:
            # Still not enough, but better than what we had
            better = True
        elif bytes_needed <= size < best:
            # We had something suitable but this is better
            better = True
        else:
            # Sorry, we'll pass
            better = False
        
        if better:
            choice = name
            best = size
    
    return (choice, best)


def send_query_to_database(conf, query):
    raise QueryError("unimplemented")

# Copied from StackOverflow 
# https://stackoverflow.com/questions/1094841/reusable-library-to-get-human-readable-version-of-file-size
def format_size(num, suffix='B'):
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)


if __name__ == "__main__":
    try:
        ret = main() or 0
        sys.exit(ret)
    finally:
        interact.close()

